//import quarter sections
var qrts = ee.FeatureCollection("users/prestonsorenson/SK_QRTS_South_4326");

// Get average values per polygon

// Filter an image collection by date and region to make a
// median pixel composite.
//
// See also: ClippedComposite, which crops the output image
// instead of filtering the input collection.

// Filter to only include images within a defined area.
var polygon = ee.Geometry.Polygon({
  coords: [[[-110.00, 49.00], [-110.00, 55.00], [-101.00, 55.00], [-101.00, 49.00]
  ]],
  geodesic: false
});

var polygon_sub = ee.Geometry.Polygon({
  coords: [[[-110.00, 49.00], [-110.00, 50.00], [-101.00, 50.00], [-101.00, 49.00]
  ]],
  geodesic: false
});

var qrts=qrts.filterBounds(polygon_sub);

//Cloud Mask
/**
 * Function to mask clouds based on the pixel_qa band of Landsat SR data.
 * @param {ee.Image} image Input Landsat SR image
 * @return {ee.Image} Cloudmasked Landsat image
 */
var cloudMaskL457 = function(image) {
  var qa = image.select('QA_PIXEL');
  // If the cloud bit (5) is set and the cloud confidence (7) is high
  // or the cloud shadow bit is set (3), then it's a bad pixel.
  var cloud = qa.bitwiseAnd(1 << 5)
                  .and(qa.bitwiseAnd(1 << 7))
                  .or(qa.bitwiseAnd(1 << 3));
  // Remove edge pixels that don't occur in all bands
  var mask2 = image.mask().reduce(ee.Reducer.min());
  return image.updateMask(cloud.not()).updateMask(mask2);
};


//set dates
var start = '1984-01-01';
var endDate = ee.Date('2011-11-30');

// Create a Landsat 5 composites filter by
// the bounds of the FeatureCollection.
var collection = 
    ee.ImageCollection('LANDSAT/LT05/C02/T1_L2')
    .filter(ee.Filter.calendarRange(1985,2011,'year'))
    .filterBounds(polygon_sub)
    .map(cloudMaskL457)
    ;

// Function to calculate and add an NDVI band
var addNDVI = function(image) {
return image.addBands(image.normalizedDifference(['SR_B4', 'SR_B3']).rename('ndvi'));
};

var addNDI5 = function(image) {
return image.addBands(image.normalizedDifference(['SR_B4', 'SR_B5']).rename('NDI5'));
};

var addNDI7 = function(image) {
return image.addBands(image.normalizedDifference(['SR_B4', 'SR_B7']).rename('NDI7'));
};


var addNBR = function(image) {
return image.addBands(image.normalizedDifference(['SR_B5', 'SR_B7']).rename('nbr'));
};


var collection = collection.map(addNDVI);
var collection = collection.map(addNDI5);
var collection = collection.map(addNDI7);
var collection = collection.map(addNBR);


var NDVI = collection.select(['ndvi']);
var NDI5 = collection.select(['NDI5']);
var NDI7 = collection.select(['NDI7']);
var nbr = collection.select(['nbr']);


//time periods
var interval = 1;
var increment = 'month';

// make a list of start years
var startDate = ee.Date(start);
var secondDate = startDate.advance(interval, increment).millis();
var increase = secondDate.subtract(startDate.millis());
var list = ee.List.sequence(startDate.millis(), endDate.millis(), increase);

print(startDate);
print(list);

// make a composite (mean image) of the images monthly
var ndvi_composites = ee.ImageCollection.fromImages(list.map(function(startYear){
  var filtCol = NDVI.filterDate(ee.Date(startYear), ee.Date(startYear).advance(interval, increment));
  // add the median to every image
  var meanImage = filtCol.median();
  return ee.Image(meanImage).set('system:time_start', ee.Date(startYear).millis());
}));

print(ndvi_composites);

var NDI5_composites = ee.ImageCollection.fromImages(list.map(function(startYear){
  var filtCol = NDI5.filterDate(ee.Date(startYear), ee.Date(startYear).advance(interval, increment));
  // add the median to every image
  var meanImage = filtCol.median();
  return ee.Image(meanImage).set('system:time_start', ee.Date(startYear).millis());
}));

print(NDI5_composites);

var NDI7_composites = ee.ImageCollection.fromImages(list.map(function(startYear){
  var filtCol = NDI7.filterDate(ee.Date(startYear), ee.Date(startYear).advance(interval, increment));
  // add the median to every image
  var meanImage = filtCol.median();
  return ee.Image(meanImage).set('system:time_start', ee.Date(startYear).millis());
}));

print(NDI7_composites);

var nbr_composites = ee.ImageCollection.fromImages(list.map(function(startYear){
  var filtCol = nbr.filterDate(ee.Date(startYear), ee.Date(startYear).advance(interval, increment));
  // add the median to every image
  var meanImage = filtCol.median();
  return ee.Image(meanImage).set('system:time_start', ee.Date(startYear).millis());
}));

print(nbr_composites);

//drop empty bands
var ndvi_composites=ndvi_composites.map(function (image) {
    var index = image.getString('system:index');
    var include = image.bandNames().size().neq(0);
    return ee.Algorithms.If(include, image, null);
  }, true);

print(ndvi_composites);

var NDI5_composites=NDI5_composites.map(function (image) {
    var index = image.getString('system:index');
    var include = image.bandNames().size().neq(0);
    return ee.Algorithms.If(include, image, null);
  }, true);

print(NDI5_composites);

var NDI7_composites=NDI7_composites.map(function (image) {
    var index = image.getString('system:index');
    var include = image.bandNames().size().neq(0);
    return ee.Algorithms.If(include, image, null);
  }, true);

print(NDI7_composites);

var nbr_composites=nbr_composites.map(function (image) {
    var index = image.getString('system:index');
    var include = image.bandNames().size().neq(0);
    return ee.Algorithms.If(include, image, null);
  }, true);

print(nbr_composites);

//reducer
var reducer = ee.Reducer.median();

var ndvi_reduced = ndvi_composites.map(function(image){
  return image.reduceRegions({
    collection: qrts,
    reducer: reducer,
    scale:30,
    tileScale: 4,
  }); 
}).flatten();

var NDI5_reduced = NDI5_composites.map(function(image){
  return image.reduceRegions({
    collection: qrts,
    reducer: reducer,
    scale:30,
    tileScale: 4,
  }); 
}).flatten();

var NDI7_reduced = NDI7_composites.map(function(image){
  return image.reduceRegions({
    collection: qrts,
    reducer: reducer,
    scale:30,
    tileScale: 4,
  }); 
}).flatten();

var nbr_reduced = nbr_composites.map(function(image){
  return image.reduceRegions({
    collection: qrts,
    reducer: reducer,
    scale:30,
    tileScale: 4,
  }); 
}).flatten();

//drop .geo
var drop_feature = function(feature){
  return feature.setGeometry(null);
};

var ndvi_reduced = ndvi_reduced.map(drop_feature);
var NDI5_reduced = NDI5_reduced.map(drop_feature);
var NDI7_reduced = NDI7_reduced.map(drop_feature);
var nbr_reduced = nbr_reduced.map(drop_feature);

//export table
// so you can export it as a table
Export.table.toDrive({
    collection: ndvi_reduced.select(['system:index', 'LEGALLAND', 'median']), 
    description: 'ndvi_med_monthly_l5_49_50', 
    folder: 'yield_mapping', 
    fileNamePrefix: 'ndvi_med_monthly_l5_49_50', 
    fileFormat: 'CSV'
});

Export.table.toDrive({
    collection: NDI5_reduced.select(['system:index', 'LEGALLAND', 'median']), 
    description: 'NDI5_med_monthly_l5_49_50', 
    folder: 'yield_mapping', 
    fileNamePrefix: 'NDI5_med_monthly_l5_49_50', 
    fileFormat: 'CSV'
});

Export.table.toDrive({
    collection: NDI7_reduced.select(['system:index', 'LEGALLAND', 'median']), 
    description: 'NDI7_med_monthly_l5_49_50', 
    folder: 'yield_mapping', 
    fileNamePrefix: 'NDI7_med_monthly_l5_49_50', 
    fileFormat: 'CSV'
});

Export.table.toDrive({
    collection: nbr_reduced.select(['system:index', 'LEGALLAND', 'median']), 
    description: 'nbr_med_monthly_l5_49_50', 
    folder: 'yield_mapping', 
    fileNamePrefix: 'nbr_med_monthly_l5_49_50', 
    fileFormat: 'CSV'
});
