//Error: Unable to use a collection in an algorithm that requires a feature or image. This may happen when trying to use a collection of collections where a collection of features is expected; use flatten, or map a function to convert inner collections to features. Use clipToCollection (instead of clip) to clip an image to a collection. (Error code: 3)

//import quarter sections
var qrts = ee.FeatureCollection("users/ptsorens/SK_QRTS_South_4326");

// Get average values per polygon

// Filter an image collection by date and region to make a
// median pixel composite.
//
// See also: ClippedComposite, which crops the output image
// instead of filtering the input collection.

// Filter to only include images within a defined area.
var polygon = ee.Geometry.Polygon({
  coords: [[[-110.00, 49.00], [-110.00, 55.00], [-101.00, 55.00], [-101.00, 49.00]
  ]],
  geodesic: false
});

//Cloud Mask
/**
 * Function to mask clouds based on the pixel_qa band of Landsat SR data.
 * @param {ee.Image} image Input Landsat SR image
 * @return {ee.Image} Cloudmasked Landsat image
 */
var cloudMaskL457 = function(image) {
  var qa = image.select('QA_PIXEL');
  // If the cloud bit (5) is set and the cloud confidence (7) is high
  // or the cloud shadow bit is set (3), then it's a bad pixel.
  var cloud = qa.bitwiseAnd(1 << 5)
                  .and(qa.bitwiseAnd(1 << 7))
                  .or(qa.bitwiseAnd(1 << 3));
  // Remove edge pixels that don't occur in all bands
  var mask2 = image.mask().reduce(ee.Reducer.min());
  return image.updateMask(cloud.not()).updateMask(mask2);
};

// Create a Landsat 7 composites filter by
// the bounds of the FeatureCollection.

var collection = 
    ee.ImageCollection('LANDSAT/LE07/C02/T1_L2')
    .filter(ee.Filter.calendarRange(1999,2021,'year'))
    .filterBounds(polygon)
    .map(cloudMaskL457);



// Function to calculate and add an NDVI band
var addNDVI = function(image) {
return image.addBands(image.normalizedDifference(['SR_B4', 'SR_B3']));
};

var collection = collection.map(addNDVI);

var NDVI = collection.select(['nd']);


//mask by crop area
var cropmask = ee.Image("projects/just-amp-296821/assets/AAFC_cropMask/AAFC_croplandMask");

//time periods
var interval = 1;
var increment = 'month';
var start = '1999-07-01';

// make a list of start years
var startDate = ee.Date(start);
var secondDate = startDate.advance(interval, increment).millis();
var increase = secondDate.subtract(startDate.millis());
var list = ee.List.sequence(startDate.millis(), ee.Date('2021-10-01').millis(), increase);

print(list);

//reducer
var reducer = ee.Reducer.mean().combine({
  reducer2: ee.Reducer.stdDev(),
  sharedInputs: true
});


// make a composite (mean image) of the images monthly
var composites = ee.ImageCollection.fromImages(list.map(function(startYear){
  var filtCol = NDVI.filterDate(ee.Date(startYear), ee.Date(startYear).advance(interval, increment));
  // add the median to every image
  var meanImage = filtCol.median().mask(cropmask);
  return ee.Image(meanImage).set('system:time_start', ee.Date(startYear).millis());
}));

print(composites);

//reducer
var reducer = ee.Reducer.mean().combine({
  reducer2: ee.Reducer.stdDev(),
  sharedInputs: true
});

var reduced = composites.map(function(image){
  return image.reduceRegions({
    collection: qrts,
    reducer: reducer,
    scale:30,
    tileScale: 4,
  });
});

//export table
// so you can export it as a table
Export.table.toDrive({
    collection: reduced, 
    description: 'ndvi_med_monthly_1999_2021', 
    folder: 'yield_mapping', 
    fileNamePrefix: 'ndvi_med_monthly_1999_2021', 
    fileFormat: 'CSV'
});
